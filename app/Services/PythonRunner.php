<?php

namespace App\Services;

// Framework
use Illuminate\Support\Facades\Storage;
use Symfony\Component\Process\Process;
use Symfony\Component\Process\Exception\ProcessFailedException;
use RuntimeException;

class PythonRunner
{
    /* Absolute path to storage/app/private/python */
    private $disk = 'local'; // Name of the target storage disk.
    private $dir  = 'python';

    /**
     * @param  string $script
     * @param  array  $payload
     * @throws RuntimeException|ProcessFailedException
     */
    public function run(string $script, array $payload = []): mixed
    {
        // Construct the script path.
        $scriptPath = "$this->dir/$script";
        // Run checks to make sure the path and script exist.
        // If they pass return the absolute path to the script.
        $diskScriptPath = $this->pathAndFileChecks($scriptPath);

        dd(env('PYTHON_NAME'));
        // Run the target script.
        $process = new Process(['python3', $diskScriptPath]);
        $process->setInput(json_encode($payload));
        $process->setTimeout(60);
        $process->run();

        // Handle a fail, need to expand on this.
        if (! $process->isSuccessful()) {
            throw new ProcessFailedException($process);
        }

        // Return JSON generated by script ot caller.
        return json_decode($process->getOutput(),
                            true, // Associate
                            2, // Max nested depth.
                            JSON_THROW_ON_ERROR // Should show non valid JSON as an error.
                        );
    }

    // Some defensive checks for debugging clarity.
    private function pathAndFileChecks($scriptPath)
    {
        // Check if the expected directory exists.
        if (!Storage::disk($this->disk)->exists($this->dir))
        {
            throw new RuntimeException("Missing $this->dir directory in storage/app");
        }

        // Check if the expected python script exists.
        if (! Storage::disk($this->disk)->exists($scriptPath))
        {
            throw new RuntimeException("Python script not found: $scriptPath");
        }

        // Generate and return the absolute path of the scripts location.
        return Storage::disk($this->disk)->path($scriptPath);
    }
}
